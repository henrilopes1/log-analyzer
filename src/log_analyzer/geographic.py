"""
M√≥dulo de an√°lise geogr√°fica do Log Analyzer
"""

import time
from typing import Dict, List, Any, Optional, Set
from collections import Counter
import requests
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text
from rich import box

from .config import DEFAULT_CONFIG


class GeographicAnalyzer:
    """Classe para an√°lise geogr√°fica de IPs suspeitos"""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None, console: Optional[Console] = None):
        """
        Inicializa o analisador geogr√°fico
        
        Args:
            config: Configura√ß√µes customizadas
            console: Inst√¢ncia do console Rich
        """
        self.config = config or DEFAULT_CONFIG
        self.console = console or Console()
        self.ip_location_cache = {}
        
        # Configura√ß√µes geogr√°ficas
        geo_config = self.config["geographic"]
        self.enabled = geo_config["enabled"]
        self.timeout = geo_config["timeout_seconds"]
        self.api_url = geo_config["api_url"]
        self.rate_limit_delay = geo_config["rate_limit_delay"]
        self.high_risk_countries = geo_config["high_risk_countries"]
    
    def get_ip_location(self, ip_address: str) -> Optional[Dict[str, Any]]:
        """
        Obt√©m informa√ß√µes de geolocaliza√ß√£o para um IP
        
        Args:
            ip_address: Endere√ßo IP
            
        Returns:
            Dicion√°rio com informa√ß√µes de localiza√ß√£o ou None
        """
        if not self.enabled:
            return None
        
        # Verificar cache
        if ip_address in self.ip_location_cache:
            return self.ip_location_cache[ip_address]
        
        # Ignorar IPs privados
        if self._is_private_ip(ip_address):
            return None
        
        try:
            # Fazer requisi√ß√£o para API
            url = f"{self.api_url}/{ip_address}?fields=status,message,country,countryCode,region,regionName,city,lat,lon,isp,org,as"
            response = requests.get(url, timeout=self.timeout)
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('status') == 'success':
                    location_info = {
                        'country': data.get('country', 'Desconhecido'),
                        'country_code': data.get('countryCode', 'XX'),
                        'region': data.get('regionName', 'Desconhecido'),
                        'city': data.get('city', 'Desconhecido'),
                        'latitude': data.get('lat', 0.0),
                        'longitude': data.get('lon', 0.0),
                        'isp': data.get('isp', 'Desconhecido'),
                        'organization': data.get('org', 'Desconhecido'),
                        'as_info': data.get('as', 'Desconhecido')
                    }
                    
                    # Adicionar ao cache
                    self.ip_location_cache[ip_address] = location_info
                    
                    # Rate limiting
                    time.sleep(self.rate_limit_delay)
                    
                    return location_info
                else:
                    self.console.print(f"[yellow]‚ö†Ô∏è Erro na geolocaliza√ß√£o de {ip_address}: {data.get('message', 'Erro desconhecido')}[/yellow]")
            
        except requests.exceptions.Timeout:
            self.console.print(f"[yellow]‚ö†Ô∏è Timeout na consulta de {ip_address}[/yellow]")
        except requests.exceptions.RequestException as e:
            self.console.print(f"[yellow]‚ö†Ô∏è Erro na requisi√ß√£o para {ip_address}: {e}[/yellow]")
        except Exception as e:
            self.console.print(f"[red]‚ùå Erro inesperado na geolocaliza√ß√£o de {ip_address}: {e}[/red]")
        
        return None
    
    def _is_private_ip(self, ip: str) -> bool:
        """
        Verifica se o IP √© privado/reservado
        
        Args:
            ip: Endere√ßo IP
            
        Returns:
            True se o IP for privado
        """
        try:
            parts = [int(x) for x in ip.split('.')]
            
            # Redes privadas RFC 1918
            if parts[0] == 10:
                return True
            if parts[0] == 172 and 16 <= parts[1] <= 31:
                return True
            if parts[0] == 192 and parts[1] == 168:
                return True
            
            # Localhost
            if parts[0] == 127:
                return True
                
            # Link-local
            if parts[0] == 169 and parts[1] == 254:
                return True
            
            return False
            
        except (ValueError, IndexError):
            return True  # Se n√£o conseguir parsear, assumir como privado
    
    def analyze_geographic_patterns(self, suspect_ips: Set[str]) -> None:
        """
        Analisa padr√µes geogr√°ficos de IPs suspeitos
        
        Args:
            suspect_ips: Conjunto de IPs suspeitos para an√°lise
        """
        if not self.enabled:
            self.console.print("[yellow]‚è≠Ô∏è An√°lise geogr√°fica desabilitada[/yellow]")
            return
        
        if not suspect_ips:
            self.console.print("[green]‚úÖ Nenhum IP suspeito para an√°lise geogr√°fica[/green]")
            return
        
        self.console.print("\nüåç AN√ÅLISE GEOGR√ÅFICA\n", style="bold blue")
        self.console.print(f"üîç Analisando {len(suspect_ips)} IPs suspeitos...\n")
        
        # Coletar dados geogr√°ficos
        geo_data = []
        countries_count = Counter()
        
        for ip in suspect_ips:
            location = self.get_ip_location(ip)
            if location:
                geo_data.append({
                    'ip': ip,
                    **location
                })
                countries_count[location['country']] += 1
        
        if not geo_data:
            self.console.print("[yellow]‚ö†Ô∏è N√£o foi poss√≠vel obter dados geogr√°ficos[/yellow]")
            return
        
        # Mostrar distribui√ß√£o por pa√≠s
        self._display_country_distribution(countries_count, len(geo_data))
        
        # Mostrar detalhes por IP
        self._display_ip_details(geo_data)
        
        # Mostrar recomenda√ß√µes
        self._display_recommendations(geo_data)
    
    def _display_country_distribution(self, countries_count: Counter, total_ips: int) -> None:
        """Exibe distribui√ß√£o geogr√°fica por pa√≠s"""
        table = Table(title="üåé Distribui√ß√£o Geogr√°fica dos IPs Suspeitos", box=box.HEAVY)
        table.add_column("Pa√≠s", style="cyan bold")
        table.add_column("C√≥digo", style="yellow", justify="center")
        table.add_column("Quantidade", style="red bold", justify="center")
        table.add_column("Percentual", style="green", justify="center")
        table.add_column("Status", style="white", justify="center")
        
        for country, count in countries_count.most_common():
            percentage = (count / total_ips) * 100
            
            # Encontrar c√≥digo do pa√≠s
            country_code = "XX"
            for geo_item in self.ip_location_cache.values():
                if geo_item and geo_item.get('country') == country:
                    country_code = geo_item.get('country_code', 'XX')
                    break
            
            # Determinar status de risco
            if country_code in self.high_risk_countries:
                status = "üö® Alto Risco"
            elif percentage > 30:
                status = "‚ö†Ô∏è Concentra√ß√£o Alta"
            else:
                status = "‚úÖ Normal"
            
            table.add_row(
                country,
                country_code,
                str(count),
                f"{percentage:.1f}%",
                status
            )
        
        self.console.print(table)
        self.console.print()
    
    def _display_ip_details(self, geo_data: List[Dict[str, Any]]) -> None:
        """Exibe detalhes geogr√°ficos de cada IP"""
        self.console.print("üîç DETALHES GEOGR√ÅFICOS DOS IPS\n", style="bold yellow")
        
        table = Table(title="üìç Informa√ß√µes Detalhadas por IP", box=box.ROUNDED)
        table.add_column("IP", style="yellow bold", no_wrap=True)
        table.add_column("Pa√≠s/Regi√£o", style="cyan")
        table.add_column("Cidade", style="white")
        table.add_column("ISP", style="blue")
        table.add_column("Coordenadas", style="green")
        table.add_column("Risco", style="red", justify="center")
        
        for item in geo_data:
            # Calcular fatores de risco
            risk_factors = []
            
            if item['country_code'] in self.high_risk_countries:
                risk_factors.append("Pa√≠s Alto Risco")
            
            org_lower = item['organization'].lower()
            if any(term in org_lower for term in ['proxy', 'vpn', 'hosting', 'server', 'datacenter']):
                risk_factors.append("VPN/Proxy/Hosting")
            
            # Determinar n√≠vel de risco
            if len(risk_factors) >= 2:
                risk_level = "üö® Alto"
            elif len(risk_factors) == 1:
                risk_level = "‚ö†Ô∏è M√©dio"
            else:
                risk_level = "‚úÖ Baixo"
            
            # Formatar dados para exibi√ß√£o
            location = f"{item['country']}/{item['region']}"
            coords = f"{item['latitude']:.2f}, {item['longitude']:.2f}"
            isp_truncated = item['isp'][:25] + "..." if len(item['isp']) > 25 else item['isp']
            
            table.add_row(
                item['ip'],
                location,
                item['city'],
                isp_truncated,
                coords,
                risk_level
            )
        
        self.console.print(table)
        self.console.print()
    
    def _display_recommendations(self, geo_data: List[Dict[str, Any]]) -> None:
        """Exibe recomenda√ß√µes baseadas na an√°lise geogr√°fica"""
        recommendations = Text()
        recommendations.append("üí° RECOMENDA√á√ïES BASEADAS NA AN√ÅLISE GEOGR√ÅFICA:\n\n", style="bold cyan")
        
        # IPs de pa√≠ses de alto risco
        high_risk_ips = [
            item for item in geo_data 
            if item['country_code'] in self.high_risk_countries
        ]
        
        if high_risk_ips:
            recommendations.append("üö® IPs de pa√≠ses de alto risco detectados:\n", style="bold red")
            for item in high_risk_ips[:5]:  # Mostrar apenas os primeiros 5
                recommendations.append(f"   ‚Ä¢ {item['ip']} ({item['country']})\n", style="red")
            recommendations.append("\n")
        
        # IPs usando VPN/Proxy/Hosting
        suspicious_orgs = [
            item for item in geo_data
            if any(term in item['organization'].lower() for term in ['proxy', 'vpn', 'hosting', 'server', 'datacenter'])
        ]
        
        if suspicious_orgs:
            recommendations.append("üîí IPs suspeitos por tipo de organiza√ß√£o:\n", style="bold yellow")
            for item in suspicious_orgs[:3]:
                recommendations.append(f"   ‚Ä¢ {item['ip']} - {item['organization']}\n", style="yellow")
            recommendations.append("\n")
        
        # Recomenda√ß√µes gerais
        recommendations.append("üõ°Ô∏è A√ß√µes recomendadas:\n", style="bold white")
        
        if high_risk_ips:
            recommendations.append("   ‚Ä¢ Implementar geo-blocking para pa√≠ses de alto risco\n", style="white")
        
        if suspicious_orgs:
            recommendations.append("   ‚Ä¢ Monitorar conex√µes atrav√©s de VPN/Proxy/Hosting\n", style="white")
        
        recommendations.append("   ‚Ä¢ Configurar alertas para mudan√ßas geogr√°ficas bruscas\n", style="white")
        recommendations.append("   ‚Ä¢ Considerar autentica√ß√£o adicional para localiza√ß√µes incomuns\n", style="white")
        recommendations.append("   ‚Ä¢ Implementar rate limiting baseado em geolocaliza√ß√£o\n", style="white")
        
        # Estat√≠sticas de concentra√ß√£o
        countries_count = Counter(item['country'] for item in geo_data)
        if countries_count.most_common(1)[0][1] > len(geo_data) * 0.5:
            recommendations.append("   ‚Ä¢ Avaliar bloqueio tempor√°rio do pa√≠s com maior concentra√ß√£o\n", style="white")
        
        panel = Panel(
            recommendations,
            title="üåç An√°lise Geogr√°fica Conclu√≠da",
            border_style="cyan",
            expand=False
        )
        
        self.console.print(panel)